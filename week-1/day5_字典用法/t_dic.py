# 在列表中，数据的关联性不强，列表的查询速度相对于字典，比较慢
# 可变（不可哈希）的数据类型：list,dict,set
# 不可变数据类型（可哈希）:int str bool tuple

# 可变与不可变，均表示对象本身是否可变

dic = {'一级宝石': '10',
       '二级宝石': '20',
       '三级宝石': '30',
       }

'''
字典在3.5x版本之前，是无序的。
字典在3.6x会按照初次建立字典的顺序排列,学术上不认为是有序的。
字典在3.7x以后都是有序的。
'''


# 字典的缺点： 以空间换时间

# 字典的几种创建方式
dic = dict((('one', 1), ('two', 2), ('three', 1)))
dic = dict(one="a", two="b", three="4")
dic = dict({'one': '1', 'two': '2', 'three': '3'})

# 字典的增删改查
dic['newkey'] = 'value' #没有键就增加，有就更新
dic.setdefault('test','sss') #增加键值对 字典中有该键值对则不处理，无则增加该键值对

# 删
dic.pop('test') #按照键来删除键值对 ，该方法如果字典中没有该键，会报错
ref = dic.pop('test','not have') #这样写的话，如果字典中没有此键，就返回第二项中内容，不会报错

del dic['test'] #根据键来删除键值对，没有会报错

# 清空字典内容
dic.clear()

dic2 = {'one':'a','two':'b','three':'c'}
# 改
dic.update(dic2) # 把字典2中的键值对，更新到字典1中去，如果字典1有对应的键值对，则更新值，如果没有，就添加新键值对
dic['one'] = '123'

print(ref)



print(dic)
