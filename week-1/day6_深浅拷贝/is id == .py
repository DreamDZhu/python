# is id ==

i = 100
s = 'alex'
b = i

# 获取i的内存地址
print(id(i))
print(id(s))
print(id(b))

l1 = [1, 2, 3]
l2 = [1, 2, 3]
# == 比较的是；两边的值是否相等
print(l1 == l2)
print(l1 is l2)

# is 比较的是：两边的内存地址是否相等

# 如果 两值 内存地址相同(id相同)，那么他们在内存中实际是一个值(值一定相同)。但是值相同，不一定就内存地址相同。

s1 = 'alex'
s2 = 'alex'

print(s1 is s2)

'''
# 什么是代码块？
# 所有的代码都需要依赖代码块执行
# 一个文件，就是一个代码块
# 交互式命令下，一行就是一个代码块
'''

"""
两个机制： 同一个代码块下，有一个机制。不同的代码块下，遵循另一个机制。

"""

# 同一个代码块下的缓存机制

# python 在执行同一个代码块中的初始化对象的命令时，会先检查值是否已经存在，如果存在，就会进行复用。
# 节省内存 提升效率
"""
对象的具体细则 前提条件：在同一个代码块内！！！！
int(float):任何数字在同一代码块下都会复用
bool: True 和 False 在字典中会以1和0方式存在，并且复用
str：几乎所有的字符串都会符合缓存机制

具体细则：所有的数字，bool,几乎所有的字符串。
"""

i1 = 1000
i2 = 1000
i3 = 1000

print(id(i1), id(i2), id(i3))

l1 = [1, 2, 3]
l2 = [1, 2, 3]

s1 = "abc"
s2 = "abc"

print(id(l1), id(l2), id(s1), id(s2))

"""
不同代码块下的缓存机制： 小数据池
python 自动将 -5 ~ 256 的整数进行了缓存，当你将这些整数赋值给变量时，并不会重新创建对象，而是使用已经创建好的缓存对象。

具体规则：-5 ~ 256，bool,满足规则的字符串。
优点：提升性能，节省内存

"""