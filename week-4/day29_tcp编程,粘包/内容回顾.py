# 概念
# B/S C/S架构
    # C/S client server
    # B/S browser server

# osi 七层协议
    # 应用层 表示层 会话层 传输层 网络层 数据链路层 物理层

# osi 五层协议
    # 应用层 传输层 网络层 数据链路层 物理层

# 数据链路层
  # arp协议 地址解析协议 通过ip 找到mac 地址
  # 交换机 / 网卡 ： 单播，多播，组播

# 网络层
  # ip 协议 （ipv4/ipv6）
  # 路由器 跨网络通信，转发路由表

# 传输层
  # tcp 协议
    # 相比UDP ，传输效率低，面向连接，需要先握手建立连接，可靠，全双工的通信
    # 可靠只的是不丢失 ，而不是安全。TCP 协议并不安全，存在被截获并修改的风险
        # 三次握手
            # 客户端向服务器发送syn = 1 的请求
            # 服务器接收到，回复 ack = 1 并回复 syn = 1 请求，表示收到握手请求信息
            # 客户端回复 ack = 1 ，表示收到服务器请求，建立连接
            # 在socket 中 ，由 connect + accept 建立
        # 四次挥手
            # 双方都可以发起结束，客户端向服务器发送fin = 1 的请求
            # 服务端回去 ack = 1,表示同意挥手，继续传输剩余数据
            # 数据全部传输完成后，服务端向客户端发送fin = 1 ，表示数据 传输完成，可以释放
            # 客户端向服务端再次发送 ack = 1 ，并等待双倍数据包生命期的时间，如果期间未收到数据包，则断开连接，完成挥手
            # 由客户端的close 和 服务器的close

        # 为什么握手是三次，而挥手是四次
            # 因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，"你发的FIN报文我收到了"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。

  # udp 协议
    # 相比TCP 传输效率高，不可靠，无连接\不可靠

  # 四层交换机，路由器






